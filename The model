model = models.vgg16(pretrained=True)
print(model)

device = torch.device("cuda" if torch.cuda.is_available() 
                                  else "cpu")
                                  
for param in model.parameters():#разморозка в конце предобученной нейросети с кастомной архитектурой
    param.requires_grad = False
    
model.fc = nn.Sequential(nn.Linear(40, 1000),
                                 nn.ReLU(),
                                 nn.Dropout(0.2),
                                 nn.Linear(1000, len(np.unique(train_val_labels))),
                                 nn.LogSoftmax(dim=1))
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.fc.parameters(), lr=0.003)
#torch.cuda.clear_memory_allocated()  # entirely clear all allocated memory
torch.cuda.empty_cache() 
model = model.to(device)

n_classes = len(np.unique(train_val_labels))
print("we will classify :{}".format(n_classes))
print(model)
